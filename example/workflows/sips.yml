SyncGranule:
  Comment: "Sync Granule"
  StartAt: SyncGranule
  States:
    SyncGranule:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            buckets: "{$.meta.buckets}"
            provider: "{$.meta.provider}"
            collection: "{$.meta.collection}"
            stack: "{$.meta.stack}"
            fileStagingDir: "custom-staging-dir"
            downloadBucket: "{$.cumulus_meta.system_bucket}"
            duplicateHandling: "{$.meta.collection.duplicateHandling}"
            cumulus_message:
              input: "{$.payload}"
              outputs:
                - source: "{$.granules}"
                  destination: "{$.meta.input_granules}"
                - source: "{$}"
                  destination: "{$.payload}"
                - source: "{$.process}"
                  destination: "{$.meta.process}"
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
        - &LambdaServiceExceptionRetry
          ErrorEquals:
            - Lambda.ServiceException
            - Lambda.AWSLambdaException
            - Lambda.SdkClientException
          IntervalSeconds: 2
          MaxAttempts: 6
          BackoffRate: 2
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

IngestAndPublishGranule:
  Comment: "Ingest Granule"
  StartAt: SyncGranule
  States:
    SyncGranule:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            Path: "$.payload"
            TargetPath: "$.payload"
          task_config:
            buckets: "{$.meta.buckets}"
            provider: "{$.meta.provider}"
            collection: "{$.meta.collection}"
            stack: "{$.meta.stack}"
            downloadBucket: "{$.cumulus_meta.system_bucket}"
            duplicateHandling: "{$.meta.collection.duplicateHandling}"
            pdr: "{$.meta.pdr}"
            cumulus_message:
              input: "{$.payload}"
              outputs:
                - source: "{$.granules}"
                  destination: "{$.meta.input_granules}"
                - source: "{$}"
                  destination: "{$.payload}"
                - source: "{$.process}"
                  destination: "{$.meta.process}"
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: WorkflowSucceeded
    ProcessingStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            collection: "{$.meta.collection}"
            cmrMetadataFormat: "{$.meta.cmrMetadataFormat}"
            additionalUrls: "{$.meta.additionalUrls}"
            cumulus_message:
              outputs:
                - source: "{$.files}"
                  destination: "{$.payload}"
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            inputGranules: "{$.meta.input_granules}"
            granuleIdExtraction: "{$.meta.collection.granuleIdExtraction}"
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: MoveGranuleStep
    MoveGranuleStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            buckets: "{$.meta.buckets}"
            distribution_endpoint: "{$.meta.distribution_endpoint}"
            collection: "{$.meta.collection}"
            duplicateHandling: "{$.meta.collection.duplicateHandling}"
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: CmrStep
    CmrStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            stack: "{$.meta.stack}"
            cmr: "{$.meta.cmr}"
            launchpad: "{$.meta.launchpad}"
            process: "{$.meta.process}"
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: WorkflowSucceeded
    WorkflowSucceeded:
      Type: Succeed
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

IngestGranule:
  Comment: "Ingest Granule"
  StartAt: SyncGranule
  States:
    SyncGranule:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            MaxSize: 1
            Path: "$.payload"
            TargetPath: "$.payload"
          task_config:
            buckets: "{$.meta.buckets}"
            provider: "{$.meta.provider}"
            collection: "{$.meta.collection}"
            stack: "{$.meta.stack}"
            downloadBucket: "{$.cumulus_meta.system_bucket}"
            duplicateHandling: "{$.meta.collection.duplicateHandling}"
            pdr: "{$.meta.pdr}"
            cumulus_message:
              input: "{$.payload}"
              outputs:
                - source: "{$.granules}"
                  destination: "{$.meta.input_granules}"
                - source: "{$}"
                  destination: "{$.payload}"
                - source: "{$.process}"
                  destination: "{$.meta.process}"
      Type: Task
      Resource: ${SyncGranuleLambdaFunction.Arn}
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: ChooseProcess
    ChooseProcess:
      Type: Choice
      Choices:
        - Variable: $.meta.process
          StringEquals: modis
          Next: ProcessingStep
      Default: WorkflowSucceeded
    ProcessingStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            collection: "{$.meta.collection}"
            cumulus_message:
              outputs:
                - source: "{$.files}"
                  destination: "{$.payload}"
      Type: Task
      Resource: ${FakeProcessingLambdaFunction.Arn}
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Retry:
        - ErrorEquals:
            - States.ALL
          IntervalSeconds: 2
          MaxAttempts: 3
      Next: FilesToGranulesStep
    FilesToGranulesStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            inputGranules: "{$.meta.input_granules}"
            granuleIdExtraction: "{$.meta.collection.granuleIdExtraction}"
      Type: Task
      Resource: ${FilesToGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: MoveGranuleStep
    MoveGranuleStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            buckets: "{$.meta.buckets}"
            distribution_endpoint: "{$.meta.distribution_endpoint}"
            collection: "{$.meta.collection}"
            duplicateHandling: "{$.meta.collection.duplicateHandling}"
      Type: Task
      Resource: ${MoveGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: WorkflowSucceeded
    WorkflowSucceeded:
      Type: Succeed
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

PublishGranule:
  Comment: "Publish Granule"
  StartAt: CmrStep
  States:
    CmrStep:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            bucket: "{$.meta.buckets.internal.name}"
            stack: "{$.meta.stack}"
            cmr: "{$.meta.cmr}"
            launchpad: "{$.meta.launchpad}"
            process: "N/A"
      Type: Task
      Resource: ${PostToCmrLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

ParsePdr:
  Comment: "Parse a given PDR"
  StartAt: ParsePdr
  States:
    ParsePdr:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            provider: "{$.meta.provider}"
            bucket: "{$.meta.buckets.internal.name}"
            stack: "{$.meta.stack}"
      Type: Task
      Resource: ${ParsePdrLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: QueueGranules
    QueueGranules:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            provider: "{$.meta.provider}"
            internalBucket: "{$.meta.buckets.internal.name}"
            stackName: "{$.meta.stack}"
            granuleIngestWorkflow: "IngestGranule"
            queueUrl: "{$.meta.queues.startSF}"
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: CheckStatus
    CheckStatus:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            Path: "$.payload"
            TargetPath: "$.payload"
          task_config:
            cumulus_message:
              outputs:
                - source: "{$}"
                  destination: "{$.payload}"
                - source: "{$.isFinished}"
                  destination: "{$.meta.isPdrFinished}"
      Type: Task
      Resource: ${PdrStatusCheckLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: CheckAgainChoice
    CheckAgainChoice:
      Type: Choice
      Choices:
        - Variable: $.meta.isPdrFinished
          BooleanEquals: false
          Next: PdrStatusReport
        - Variable: $.meta.isPdrFinished
          BooleanEquals: true
          Next: WorkflowSucceeded
      Default: WorkflowSucceeded
    PdrStatusReport:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            cumulus_message:
              input: "{$}"
      Type: Task
      Resource: ${SfSnsReportLambdaFunction.Arn}
      ResultPath: null
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: WaitForSomeTime
    WaitForSomeTime:
      Type: Wait
      Seconds: 10
      Next: CheckStatus
    WorkflowSucceeded:
      Type: Succeed
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

DiscoverGranules:
  Comment: "Discovers new Granules from a given provider"
  StartAt: DiscoverGranules
  TimeoutSeconds: 18000 # 5 hours
  States:
    DiscoverGranules:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            provider: "{$.meta.provider}"
            collection: "{$.meta.collection}"
            buckets: "{$.meta.buckets}"
            stack: "{$.meta.stack}"
      Type: Task
      Resource: ${DiscoverGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: QueueGranules
    QueueGranules:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            provider: "{$.meta.provider}"
            internalBucket: "{$.meta.buckets.internal.name}"
            stackName: "{$.meta.stack}"
            granuleIngestWorkflow: "IngestGranule"
            queueUrl: "{$.meta.queues.startSF}"
      Type: Task
      Resource: ${QueueGranulesLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"

DiscoverAndQueuePdrs:
  Comment: "Discovers new PDRs from a given provider"
  StartAt: DiscoverPdrs
  States:
    DiscoverPdrs:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            stack: "{$.meta.stack}"
            provider: "{$.meta.provider}"
            bucket: "{$.meta.buckets.internal.name}"
            collection: "{$.meta.collection}"
      Type: Task
      Resource: ${DiscoverPdrsLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      Next: QueuePdrs
    QueuePdrs:
      Parameters:
        cma:
          event.$: "$"
          ReplaceConfig:
            FullMessage: true
          task_config:
            queueUrl: "{$.meta.queues.startSF}"
            internalBucket: "{$.meta.buckets.internal.name}"
            stackName: "{$.meta.stack}"
            parsePdrWorkflow: "ParsePdr"
            provider: "{$.meta.provider}"
            collection: "{$.meta.collection}"
      Type: Task
      Resource: ${QueuePdrsLambdaFunction.Arn}
      Retry:
        - <<: *LambdaServiceExceptionRetry
      Catch:
        - ErrorEquals:
            - States.ALL
          ResultPath: "$.exception"
          Next: WorkflowFailed
      End: true
    WorkflowFailed:
      Type: Fail
      Cause: "Workflow failed"
